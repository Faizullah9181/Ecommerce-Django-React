{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS } from \"../constants/userConstants\";\nimport axios from \"axios\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login/\", {\n      username: email,\n      password: password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/register/\", {\n      'name': name,\n      'email': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hp/Desktop/Ecommerce/frontend/src/actions/userActions.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_FAIL","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","username","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name"],"mappings":"AAAA,SACEA,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,WAJF,EAOEC,qBAPF,EAQEC,kBARF,EASEC,qBATF,QAWO,4BAXP;AAaA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIA,UAAMa,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CACrB,mBADqB,EAGrB;AAAEC,MAAAA,QAAQ,EAAER,KAAZ;AAAmBC,MAAAA,QAAQ,EAAEA;AAA7B,KAHqB,EAIrBG,MAJqB,CAAvB;AAOAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,kBADC;AAEPgB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACD,GAxBD,CAwBE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX,eADC;AAEPiB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CAlCM;AAsCP,OAAO,MAAMC,MAAM,GAAC,MAAKhB,QAAD,IAAY;AAGlCQ,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAjB,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACT;AAAN,GAAD,CAAR;AACD,CALM;AASP,OAAO,MAAM0B,QAAQ,GAAG,CAACC,IAAD,EAAMrB,KAAN,EAAaC,QAAb,KAA0B,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAIA,UAAMS,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CACrB,sBADqB,EAGrB;AAAE,cAAOc,IAAT;AAAe,eAASrB,KAAxB;AAA+B,kBAAYC;AAA3C,KAHqB,EAIrBG,MAJqB,CAAvB;AAOAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,qBADC;AAEPY,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,kBADC;AAEPgB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACD,GA5BD,CA4BE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,kBADC;AAEPa,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CAtCM","sourcesContent":["import {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n\r\n\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_SUCCESS,\r\n\r\n} from \"../constants/userConstants\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"/api/users/login/\",\r\n\r\n      { username: email, password: password },\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const logout=()=>(dispatch)=>{\r\n\r\n\r\n  localStorage.removeItem('userInfo')\r\n  dispatch({type:USER_LOGOUT})\r\n}\r\n\r\n\r\n\r\nexport const register = (name,email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"/api/users/register/\",\r\n\r\n      { 'name':name ,'email': email, 'password': password },\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data\r\n  })\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}